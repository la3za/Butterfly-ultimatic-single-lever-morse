
Ultimatic7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000958  000009ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800102  00800102  000009ee  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000026d  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083f  00000000  00000000  00000cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f1  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000903  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d4  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000367  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
   c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_3>
  10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
  58:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_22>

0000005c <__c.1388>:
  5c:	53 67 6c 00                                         Sgl.

00000060 <__c.1386>:
  60:	55 6c 74 00                                         Ult.

00000064 <__c.1384>:
  64:	44 69 72 00                                         Dir.

00000068 <__c.1381>:
  68:	44 49 52 00                                         DIR.

0000006c <LCD_character_table>:
  6c:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  7c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  98:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  a8:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  b8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  c8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf ef       	ldi	r28, 0xFF	; 255
  de:	d4 e0       	ldi	r29, 0x04	; 4
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	e8 e5       	ldi	r30, 0x58	; 88
  ec:	f9 e0       	ldi	r31, 0x09	; 9
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <.do_copy_data_start>

000000f0 <.do_copy_data_loop>:
  f0:	05 90       	lpm	r0, Z+
  f2:	0d 92       	st	X+, r0

000000f4 <.do_copy_data_start>:
  f4:	a2 30       	cpi	r26, 0x02	; 2
  f6:	b1 07       	cpc	r27, r17
  f8:	d9 f7       	brne	.-10     	; 0xf0 <.do_copy_data_loop>

000000fa <__do_clear_bss>:
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	a2 e0       	ldi	r26, 0x02	; 2
  fe:	b1 e0       	ldi	r27, 0x01	; 1
 100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
 102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
 104:	a9 34       	cpi	r26, 0x49	; 73
 106:	b1 07       	cpc	r27, r17
 108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>
 10a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
 10e:	0c 94 aa 04 	jmp	0x954	; 0x954 <_exit>

00000112 <__bad_interrupt>:
 112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <paddle>:


void paddle()
{

	if (keyer == 0)   // Direct: output = input   
 116:	80 91 0a 01 	lds	r24, 0x010A
 11a:	90 91 0b 01 	lds	r25, 0x010B
 11e:	89 2b       	or	r24, r25
 120:	b9 f4       	brne	.+46     	; 0x150 <paddle+0x3a>
	  { 
	 	  l_out = !(0x01 & l_in); r_out= !(0x01 & r_in); // Boolean inverse
 122:	80 91 18 01 	lds	r24, 0x0118
 126:	90 91 19 01 	lds	r25, 0x0119
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	82 27       	eor	r24, r18
 130:	93 27       	eor	r25, r19
 132:	81 70       	andi	r24, 0x01	; 1
 134:	90 70       	andi	r25, 0x00	; 0
 136:	90 93 13 01 	sts	0x0113, r25
 13a:	80 93 12 01 	sts	0x0112, r24
 13e:	80 91 10 01 	lds	r24, 0x0110
 142:	90 91 11 01 	lds	r25, 0x0111
 146:	82 27       	eor	r24, r18
 148:	93 27       	eor	r25, r19
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	90 70       	andi	r25, 0x00	; 0
 14e:	85 c0       	rjmp	.+266    	; 0x25a <paddle+0x144>
     	"An ultimatic adapter for iambic keyers"
     	http://fermi.la.asu.edu/w9cf/articles/ultimatic/ultimatic.html
	 
	 	with the addition of the Single-paddle emulation mode
     */ 
		if (state==0)
 150:	20 91 04 01 	lds	r18, 0x0104
 154:	30 91 05 01 	lds	r19, 0x0105
 158:	21 15       	cp	r18, r1
 15a:	31 05       	cpc	r19, r1
 15c:	09 f0       	breq	.+2      	; 0x160 <paddle+0x4a>
 15e:	5e c0       	rjmp	.+188    	; 0x21c <paddle+0x106>
		{	 
	 		if ((l_in==0) & (r_in==0)) 
 160:	80 91 18 01 	lds	r24, 0x0118
 164:	90 91 19 01 	lds	r25, 0x0119
 168:	20 91 10 01 	lds	r18, 0x0110
 16c:	30 91 11 01 	lds	r19, 0x0111
 170:	89 2b       	or	r24, r25
 172:	01 f5       	brne	.+64     	; 0x1b4 <paddle+0x9e>
 174:	23 2b       	or	r18, r19
 176:	f1 f4       	brne	.+60     	; 0x1b4 <paddle+0x9e>
			// two paddles closed, right first
			{
	    		state = 0;
 178:	10 92 05 01 	sts	0x0105, r1
 17c:	10 92 04 01 	sts	0x0104, r1

				if (keyer==1) 		// Ultimatic
 180:	80 91 0a 01 	lds	r24, 0x010A
 184:	90 91 0b 01 	lds	r25, 0x010B
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	91 05       	cpc	r25, r1
 18c:	29 f4       	brne	.+10     	; 0x198 <paddle+0x82>
				{
					l_out = 1; r_out = 0; // change to left
 18e:	90 93 13 01 	sts	0x0113, r25
 192:	80 93 12 01 	sts	0x0112, r24
 196:	83 c0       	rjmp	.+262    	; 0x29e <paddle+0x188>
				}
				else if (keyer==2) 	// Single-paddle emulation
 198:	80 91 0a 01 	lds	r24, 0x010A
 19c:	90 91 0b 01 	lds	r25, 0x010B
 1a0:	02 97       	sbiw	r24, 0x02	; 2
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <paddle+0x90>
 1a4:	b4 c0       	rjmp	.+360    	; 0x30e <paddle+0x1f8>
				{ 
					l_out = 0; r_out = 1; // keep right
 1a6:	10 92 13 01 	sts	0x0113, r1
 1aa:	10 92 12 01 	sts	0x0112, r1
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	53 c0       	rjmp	.+166    	; 0x25a <paddle+0x144>
				}
				
		    }
			else if ((l_in==0) & (r_in==1))
 1b4:	80 91 18 01 	lds	r24, 0x0118
 1b8:	90 91 19 01 	lds	r25, 0x0119
 1bc:	20 91 10 01 	lds	r18, 0x0110
 1c0:	30 91 11 01 	lds	r19, 0x0111
 1c4:	89 2b       	or	r24, r25
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <paddle+0xba>
 1c8:	21 30       	cpi	r18, 0x01	; 1
 1ca:	31 05       	cpc	r19, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <paddle+0xba>
 1ce:	5f c0       	rjmp	.+190    	; 0x28e <paddle+0x178>
			{
				state = 1; l_out = 1; r_out = 0;
			}
			else if ((l_in==1) & (r_in==0))
 1d0:	20 91 18 01 	lds	r18, 0x0118
 1d4:	30 91 19 01 	lds	r19, 0x0119
 1d8:	80 91 10 01 	lds	r24, 0x0110
 1dc:	90 91 11 01 	lds	r25, 0x0111
 1e0:	21 30       	cpi	r18, 0x01	; 1
 1e2:	31 05       	cpc	r19, r1
 1e4:	19 f4       	brne	.+6      	; 0x1ec <paddle+0xd6>
 1e6:	89 2b       	or	r24, r25
 1e8:	09 f4       	brne	.+2      	; 0x1ec <paddle+0xd6>
 1ea:	6b c0       	rjmp	.+214    	; 0x2c2 <paddle+0x1ac>
			{
				state = 0; l_out = 0; r_out = 1;
			}
			else if ((l_in==1) & (r_in==1))
 1ec:	80 91 18 01 	lds	r24, 0x0118
 1f0:	90 91 19 01 	lds	r25, 0x0119
 1f4:	20 91 10 01 	lds	r18, 0x0110
 1f8:	30 91 11 01 	lds	r19, 0x0111
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <paddle+0xec>
 200:	86 c0       	rjmp	.+268    	; 0x30e <paddle+0x1f8>
 202:	21 30       	cpi	r18, 0x01	; 1
 204:	31 05       	cpc	r19, r1
 206:	09 f0       	breq	.+2      	; 0x20a <paddle+0xf4>
 208:	82 c0       	rjmp	.+260    	; 0x30e <paddle+0x1f8>
			{
				state = 0; l_out = 0; r_out = 0;
 20a:	10 92 05 01 	sts	0x0105, r1
 20e:	10 92 04 01 	sts	0x0104, r1
 212:	10 92 13 01 	sts	0x0113, r1
 216:	10 92 12 01 	sts	0x0112, r1
 21a:	41 c0       	rjmp	.+130    	; 0x29e <paddle+0x188>
			}	
		}

		else if (state==1)
 21c:	21 30       	cpi	r18, 0x01	; 1
 21e:	31 05       	cpc	r19, r1
 220:	09 f0       	breq	.+2      	; 0x224 <paddle+0x10e>
 222:	75 c0       	rjmp	.+234    	; 0x30e <paddle+0x1f8>
		{	
		if ((l_in==0) & (r_in==0)) 
 224:	80 91 18 01 	lds	r24, 0x0118
 228:	90 91 19 01 	lds	r25, 0x0119
 22c:	40 91 10 01 	lds	r20, 0x0110
 230:	50 91 11 01 	lds	r21, 0x0111
 234:	89 2b       	or	r24, r25
 236:	f1 f4       	brne	.+60     	; 0x274 <paddle+0x15e>
 238:	45 2b       	or	r20, r21
 23a:	e1 f4       	brne	.+56     	; 0x274 <paddle+0x15e>
		// two paddles closed, left first
			{
	    		state = 1; 
 23c:	30 93 05 01 	sts	0x0105, r19
 240:	20 93 04 01 	sts	0x0104, r18

				if (keyer==1) 		// Ultimatic
 244:	80 91 0a 01 	lds	r24, 0x010A
 248:	90 91 0b 01 	lds	r25, 0x010B
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	91 05       	cpc	r25, r1
 250:	49 f4       	brne	.+18     	; 0x264 <paddle+0x14e>
				{
					l_out = 0; r_out = 1; // change to right
 252:	10 92 13 01 	sts	0x0113, r1
 256:	10 92 12 01 	sts	0x0112, r1
 25a:	90 93 17 01 	sts	0x0117, r25
 25e:	80 93 16 01 	sts	0x0116, r24
 262:	08 95       	ret
				}
				else if (keyer==2) 	// Single-paddle emulation
 264:	80 91 0a 01 	lds	r24, 0x010A
 268:	90 91 0b 01 	lds	r25, 0x010B
 26c:	02 97       	sbiw	r24, 0x02	; 2
 26e:	09 f0       	breq	.+2      	; 0x272 <paddle+0x15c>
 270:	4e c0       	rjmp	.+156    	; 0x30e <paddle+0x1f8>
 272:	11 c0       	rjmp	.+34     	; 0x296 <paddle+0x180>
				{ 
					l_out = 1; r_out = 0; // keep left
				}
				
		    }
			else if ((l_in==0) & (r_in==1))
 274:	80 91 18 01 	lds	r24, 0x0118
 278:	90 91 19 01 	lds	r25, 0x0119
 27c:	20 91 10 01 	lds	r18, 0x0110
 280:	30 91 11 01 	lds	r19, 0x0111
 284:	89 2b       	or	r24, r25
 286:	81 f4       	brne	.+32     	; 0x2a8 <paddle+0x192>
 288:	21 30       	cpi	r18, 0x01	; 1
 28a:	31 05       	cpc	r19, r1
 28c:	69 f4       	brne	.+26     	; 0x2a8 <paddle+0x192>
			{
				state = 1; l_out = 1; r_out = 0;
 28e:	30 93 05 01 	sts	0x0105, r19
 292:	20 93 04 01 	sts	0x0104, r18
 296:	30 93 13 01 	sts	0x0113, r19
 29a:	20 93 12 01 	sts	0x0112, r18
 29e:	10 92 17 01 	sts	0x0117, r1
 2a2:	10 92 16 01 	sts	0x0116, r1
 2a6:	08 95       	ret
			}
			else if ((l_in==1) & (r_in==0))
 2a8:	20 91 18 01 	lds	r18, 0x0118
 2ac:	30 91 19 01 	lds	r19, 0x0119
 2b0:	80 91 10 01 	lds	r24, 0x0110
 2b4:	90 91 11 01 	lds	r25, 0x0111
 2b8:	21 30       	cpi	r18, 0x01	; 1
 2ba:	31 05       	cpc	r19, r1
 2bc:	79 f4       	brne	.+30     	; 0x2dc <paddle+0x1c6>
 2be:	89 2b       	or	r24, r25
 2c0:	69 f4       	brne	.+26     	; 0x2dc <paddle+0x1c6>
			{
				state = 0; l_out = 0; r_out = 1;
 2c2:	10 92 05 01 	sts	0x0105, r1
 2c6:	10 92 04 01 	sts	0x0104, r1
 2ca:	10 92 13 01 	sts	0x0113, r1
 2ce:	10 92 12 01 	sts	0x0112, r1
 2d2:	30 93 17 01 	sts	0x0117, r19
 2d6:	20 93 16 01 	sts	0x0116, r18
 2da:	08 95       	ret
			}
			else if ((l_in==1) & (r_in==1))
 2dc:	80 91 18 01 	lds	r24, 0x0118
 2e0:	90 91 19 01 	lds	r25, 0x0119
 2e4:	20 91 10 01 	lds	r18, 0x0110
 2e8:	30 91 11 01 	lds	r19, 0x0111
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	79 f4       	brne	.+30     	; 0x30e <paddle+0x1f8>
 2f0:	21 30       	cpi	r18, 0x01	; 1
 2f2:	31 05       	cpc	r19, r1
 2f4:	61 f4       	brne	.+24     	; 0x30e <paddle+0x1f8>
			{
				state = 0; l_out = 0; r_out = 0;
 2f6:	10 92 05 01 	sts	0x0105, r1
 2fa:	10 92 04 01 	sts	0x0104, r1
 2fe:	10 92 13 01 	sts	0x0113, r1
 302:	10 92 12 01 	sts	0x0112, r1
 306:	10 92 17 01 	sts	0x0117, r1
 30a:	10 92 16 01 	sts	0x0116, r1
 30e:	08 95       	ret

00000310 <PinChangeInterrupt>:
void PinChangeInterrupt(void)
{
    char buttons;
    char key;

    buttons = (~PINB) & PINB_MASK;
 310:	83 b1       	in	r24, 0x03	; 3
    buttons |= (~PINE) & PINE_MASK;
 312:	9c b1       	in	r25, 0x0c	; 12
 314:	90 95       	com	r25
 316:	9c 70       	andi	r25, 0x0C	; 12
 318:	80 95       	com	r24
 31a:	80 7d       	andi	r24, 0xD0	; 208
 31c:	98 2b       	or	r25, r24

    // Output virtual keys
    if      (buttons & (1<<BUTTON_A))
 31e:	96 ff       	sbrs	r25, 6
 320:	02 c0       	rjmp	.+4      	; 0x326 <PinChangeInterrupt+0x16>
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0f c0       	rjmp	.+30     	; 0x344 <PinChangeInterrupt+0x34>
        key = KEY_UP;
    else if (buttons & (1<<BUTTON_B))
 326:	97 ff       	sbrs	r25, 7
 328:	02 c0       	rjmp	.+4      	; 0x32e <PinChangeInterrupt+0x1e>
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0b c0       	rjmp	.+22     	; 0x344 <PinChangeInterrupt+0x34>
        key = KEY_DOWN;
    else if (buttons & (1<<BUTTON_C))
 32e:	92 ff       	sbrs	r25, 2
 330:	02 c0       	rjmp	.+4      	; 0x336 <PinChangeInterrupt+0x26>
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	07 c0       	rjmp	.+14     	; 0x344 <PinChangeInterrupt+0x34>
        key = KEY_LEFT;
    else if (buttons & (1<<BUTTON_D))
 336:	93 ff       	sbrs	r25, 3
 338:	02 c0       	rjmp	.+4      	; 0x33e <PinChangeInterrupt+0x2e>
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	03 c0       	rjmp	.+6      	; 0x344 <PinChangeInterrupt+0x34>
        key = KEY_RIGHT;
    else if (buttons & (1<<BUTTON_O))
 33e:	94 ff       	sbrs	r25, 4
 340:	0a c0       	rjmp	.+20     	; 0x356 <PinChangeInterrupt+0x46>
 342:	94 e0       	ldi	r25, 0x04	; 4
    else
        key = KEY_INVALID;
  
    if(key != KEY_INVALID)
    {
        if (!KEY_VALID)
 344:	80 91 03 01 	lds	r24, 0x0103
 348:	88 23       	and	r24, r24
 34a:	29 f4       	brne	.+10     	; 0x356 <PinChangeInterrupt+0x46>
        {
            KEY = key;          // Store key in global key buffer
 34c:	90 93 02 01 	sts	0x0102, r25
            KEY_VALID = 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 03 01 	sts	0x0103, r24
        }
    }
	 
    EIFR = (1<<PCIF1) | (1<<PCIF0);     // Delete pin change interrupt flags 
 356:	80 ec       	ldi	r24, 0xC0	; 192
 358:	8c bb       	out	0x1c, r24	; 28
}
 35a:	08 95       	ret

0000035c <__vector_3>:
}
*/


SIGNAL(SIG_PIN_CHANGE1)  // joystick on PORTB
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	PinChangeInterrupt();
 37e:	0e 94 88 01 	call	0x310	; 0x310 <PinChangeInterrupt>
}
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <main>:
int state=0, exchange=0, LEDs = 0;
volatile int keyer=0; // was 2
volatile int l_in, r_in, lll, l_out, r_out;

int main(void)
{
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	
	// Initial state variables
	statetext  = PSTR("DIR");
	

	LCD_Init();                 // initialize the LCD
 3ac:	0e 94 58 03 	call	0x6b0	; 0x6b0 <LCD_Init>
#endif

	// Init port pins for keyer input
	DDRE = 0xCF; // set port E 4,5 for input
 3b0:	8f ec       	ldi	r24, 0xCF	; 207
 3b2:	8d b9       	out	0x0d, r24	; 13

	// Init port pins for joystick PE2,3; PB4,6,7
    DDRB   |= 0xD8;
 3b4:	84 b1       	in	r24, 0x04	; 4
 3b6:	88 6d       	ori	r24, 0xD8	; 216
 3b8:	84 b9       	out	0x04, r24	; 4
	DDRB   |= 0x00;      
 3ba:	84 b1       	in	r24, 0x04	; 4
 3bc:	84 b9       	out	0x04, r24	; 4
	PORTB  |= PINB_MASK; 
 3be:	85 b1       	in	r24, 0x05	; 5
 3c0:	80 6d       	ori	r24, 0xD0	; 208
 3c2:	85 b9       	out	0x05, r24	; 5

	DDRE   |= 0x00; 	// added | to keep inputs on E 4,5
 3c4:	8d b1       	in	r24, 0x0d	; 13
 3c6:	8d b9       	out	0x0d, r24	; 13
//  DDRE   &= 0xF3;
//	PORTE  |= PINE_MASK; // no more input from E 

	// Enable pin change interrupt on PORTB and PORTE
    PCMSK0 = PINE_MASK; // comment out => Xchange function disappears
 3c8:	8c e0       	ldi	r24, 0x0C	; 12
 3ca:	80 93 6b 00 	sts	0x006B, r24
	PCMSK1 = PINB_MASK;
 3ce:	80 ed       	ldi	r24, 0xD0	; 208
 3d0:	80 93 6c 00 	sts	0x006C, r24
	EIFR   = (1<<6)|(1<<7); // External interrupt flag register
 3d4:	80 ec       	ldi	r24, 0xC0	; 192
 3d6:	8c bb       	out	0x1c, r24	; 28
	EIMSK  = (1<<6)|(1<<7); // External interrupt mask register
 3d8:	8d bb       	out	0x1d, r24	; 29
	

#if PORTBE // Output to keyer 
// Set up output on PORT B5 (piezo) + E6 (side connector)
	DDRB |= 0x20;
 3da:	25 9a       	sbi	0x04, 5	; 4
	DDRE |= 0x40; 
 3dc:	6e 9a       	sbi	0x0d, 6	; 13
#if LCD
// mt static char __flash *statetext;
	PGM_P statetext;
	
	// Initial state variables
	statetext  = PSTR("DIR");
 3de:	c8 e6       	ldi	r28, 0x68	; 104
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
				else if (keyer == 2)
					statetext = PSTR("Sgl");
				break;

			case KEY_DOWN: // Morse on LCDS on/off
				LEDs = !(0x01 & LEDs); // flip
 3e2:	01 e0       	ldi	r16, 0x01	; 1
 3e4:	10 e0       	ldi	r17, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <main+0x48>
#if LCD
// mt static char __flash *statetext;
	PGM_P statetext;
	
	// Initial state variables
	statetext  = PSTR("DIR");
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{

// chap 7 in Pardue C Programming for Microcontrollers for interrupt handling

	cli(); // disable interrupts so 'KEY' won't change while in use
 3ec:	f8 94       	cli

		if (KEY_VALID) // check for unread key in buffer
 3ee:	80 91 03 01 	lds	r24, 0x0103
 3f2:	88 23       	and	r24, r24
 3f4:	11 f4       	brne	.+4      	; 0x3fa <main+0x56>
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <main+0x5e>
		{	
			k = KEY;
 3fa:	80 91 02 01 	lds	r24, 0x0102
			KEY_VALID = 0;
 3fe:	10 92 03 01 	sts	0x0103, r1
		}
		else
			k = KEY_INVALID; // No key stroke available

	sei(); // enable interrupts
 402:	78 94       	sei


	if (k != KEY_INVALID)
 404:	85 30       	cpi	r24, 0x05	; 5
 406:	09 f4       	brne	.+2      	; 0x40a <main+0x66>
 408:	4f c0       	rjmp	.+158    	; 0x4a8 <main+0x104>
	{
		switch(k)
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	a1 f1       	breq	.+104    	; 0x476 <main+0xd2>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	20 f0       	brcs	.+8      	; 0x41a <main+0x76>
 412:	84 30       	cpi	r24, 0x04	; 4
 414:	09 f0       	breq	.+2      	; 0x418 <main+0x74>
 416:	48 c0       	rjmp	.+144    	; 0x4a8 <main+0x104>
 418:	3b c0       	rjmp	.+118    	; 0x490 <main+0xec>
		{
			case KEY_UP:  // new mode
				keyer = keyer + 1;
 41a:	80 91 0a 01 	lds	r24, 0x010A
 41e:	90 91 0b 01 	lds	r25, 0x010B
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	90 93 0b 01 	sts	0x010B, r25
 428:	80 93 0a 01 	sts	0x010A, r24
				if (keyer >= 3) 
 42c:	80 91 0a 01 	lds	r24, 0x010A
 430:	90 91 0b 01 	lds	r25, 0x010B
 434:	03 97       	sbiw	r24, 0x03	; 3
 436:	24 f0       	brlt	.+8      	; 0x440 <main+0x9c>
					keyer = 0;
 438:	10 92 0b 01 	sts	0x010B, r1
 43c:	10 92 0a 01 	sts	0x010A, r1

				if (keyer==0)
 440:	80 91 0a 01 	lds	r24, 0x010A
 444:	90 91 0b 01 	lds	r25, 0x010B
 448:	89 2b       	or	r24, r25
 44a:	19 f4       	brne	.+6      	; 0x452 <main+0xae>
					statetext = PSTR("Dir");	
 44c:	c4 e6       	ldi	r28, 0x64	; 100
 44e:	d0 e0       	ldi	r29, 0x00	; 0
 450:	2b c0       	rjmp	.+86     	; 0x4a8 <main+0x104>
				else if (keyer == 1)
 452:	80 91 0a 01 	lds	r24, 0x010A
 456:	90 91 0b 01 	lds	r25, 0x010B
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	19 f4       	brne	.+6      	; 0x464 <main+0xc0>
					statetext = PSTR("Ult");	
 45e:	c0 e6       	ldi	r28, 0x60	; 96
 460:	d0 e0       	ldi	r29, 0x00	; 0
 462:	22 c0       	rjmp	.+68     	; 0x4a8 <main+0x104>
				else if (keyer == 2)
 464:	80 91 0a 01 	lds	r24, 0x010A
 468:	90 91 0b 01 	lds	r25, 0x010B
 46c:	02 97       	sbiw	r24, 0x02	; 2
 46e:	e1 f4       	brne	.+56     	; 0x4a8 <main+0x104>
					statetext = PSTR("Sgl");
 470:	cc e5       	ldi	r28, 0x5C	; 92
 472:	d0 e0       	ldi	r29, 0x00	; 0
 474:	19 c0       	rjmp	.+50     	; 0x4a8 <main+0x104>
				break;

			case KEY_DOWN: // Morse on LCDS on/off
				LEDs = !(0x01 & LEDs); // flip
 476:	80 91 08 01 	lds	r24, 0x0108
 47a:	90 91 09 01 	lds	r25, 0x0109
 47e:	80 27       	eor	r24, r16
 480:	91 27       	eor	r25, r17
 482:	81 70       	andi	r24, 0x01	; 1
 484:	90 70       	andi	r25, 0x00	; 0
 486:	90 93 09 01 	sts	0x0109, r25
 48a:	80 93 08 01 	sts	0x0108, r24
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <main+0x104>
				break; 			

			case KEY_PUSH: // Exchange left-right
				exchange = !(0x01 & exchange); // flip 			
 490:	80 91 06 01 	lds	r24, 0x0106
 494:	90 91 07 01 	lds	r25, 0x0107
 498:	80 27       	eor	r24, r16
 49a:	91 27       	eor	r25, r17
 49c:	81 70       	andi	r24, 0x01	; 1
 49e:	90 70       	andi	r25, 0x00	; 0
 4a0:	90 93 07 01 	sts	0x0107, r25
 4a4:	80 93 06 01 	sts	0x0106, r24
		}
	}

#if LCD

	if ((exchange == 1))// & (firstEx == 1))
 4a8:	80 91 06 01 	lds	r24, 0x0106
 4ac:	90 91 07 01 	lds	r25, 0x0107
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	19 f4       	brne	.+6      	; 0x4ba <main+0x116>
		{
			LCD_putc(3,'x'); // doesn't work with 4
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	68 e7       	ldi	r22, 0x78	; 120
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <main+0x11a>
			LCD_UpdateRequired(1, 0);
			firstEx = 1;   // make sure LCD is changed only once
		}
		else 
		{
			LCD_putc(3,' ');
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	60 e2       	ldi	r22, 0x20	; 32
 4be:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_putc>
			LCD_UpdateRequired(1, 0);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_UpdateRequired>
			firstEx = 1;
		}

if (statetext)
 4ca:	20 97       	sbiw	r28, 0x00	; 0
 4cc:	39 f0       	breq	.+14     	; 0x4dc <main+0x138>
        {
			LCD_puts_f(statetext, 1);
 4ce:	ce 01       	movw	r24, r28
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	0e 94 1c 04 	call	0x838	; 0x838 <LCD_puts_f>
			LCD_Colon(0);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_Colon>
		}
#endif


// Read keyer input	
	r_in = (0x01) & (PINE>>4); 
 4dc:	8c b1       	in	r24, 0x0c	; 12
 4de:	82 95       	swap	r24
 4e0:	8f 70       	andi	r24, 0x0F	; 15
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	81 70       	andi	r24, 0x01	; 1
 4e6:	90 70       	andi	r25, 0x00	; 0
 4e8:	90 93 11 01 	sts	0x0111, r25
 4ec:	80 93 10 01 	sts	0x0110, r24
	l_in = (0x01) & (PINE>>5); 
 4f0:	8c b1       	in	r24, 0x0c	; 12
 4f2:	82 95       	swap	r24
 4f4:	86 95       	lsr	r24
 4f6:	87 70       	andi	r24, 0x07	; 7
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	81 70       	andi	r24, 0x01	; 1
 4fc:	90 70       	andi	r25, 0x00	; 0
 4fe:	90 93 19 01 	sts	0x0119, r25
 502:	80 93 18 01 	sts	0x0118, r24

	if (exchange == 1) // switch left and right paddle
 506:	80 91 06 01 	lds	r24, 0x0106
 50a:	90 91 07 01 	lds	r25, 0x0107
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	c1 f4       	brne	.+48     	; 0x542 <__stack+0x43>
	{
		lll = l_in;
 512:	80 91 18 01 	lds	r24, 0x0118
 516:	90 91 19 01 	lds	r25, 0x0119
 51a:	90 93 15 01 	sts	0x0115, r25
 51e:	80 93 14 01 	sts	0x0114, r24
		l_in = r_in;
 522:	80 91 10 01 	lds	r24, 0x0110
 526:	90 91 11 01 	lds	r25, 0x0111
 52a:	90 93 19 01 	sts	0x0119, r25
 52e:	80 93 18 01 	sts	0x0118, r24
		r_in = lll;
 532:	80 91 14 01 	lds	r24, 0x0114
 536:	90 91 15 01 	lds	r25, 0x0115
 53a:	90 93 11 01 	sts	0x0111, r25
 53e:	80 93 10 01 	sts	0x0110, r24
	}

// Main routine for all paddle handling
    
	paddle(); 
 542:	0e 94 8b 00 	call	0x116	; 0x116 <paddle>

//firstSign

#if PORTBE  // final version output on ports b and e
	if (l_out == 1)
 546:	80 91 12 01 	lds	r24, 0x0112
 54a:	90 91 13 01 	lds	r25, 0x0113
 54e:	20 91 08 01 	lds	r18, 0x0108
 552:	30 91 09 01 	lds	r19, 0x0109
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	39 f4       	brne	.+14     	; 0x568 <__stack+0x69>
	{	
		PORTE &= ~0x40;
 55a:	76 98       	cbi	0x0e, 6	; 14
		if (LEDs == 1) // too slow due to too often LCD Update
 55c:	21 30       	cpi	r18, 0x01	; 1
 55e:	31 05       	cpc	r19, r1
 560:	79 f4       	brne	.+30     	; 0x580 <__stack+0x81>
		{
			LCD_putc(4,'-');
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	6d e2       	ldi	r22, 0x2D	; 45
 566:	06 c0       	rjmp	.+12     	; 0x574 <__stack+0x75>
			LCD_UpdateRequired(1, 0);
		}
	}
	else
	{
		PORTE |= 0x40;
 568:	76 9a       	sbi	0x0e, 6	; 14
		if (LEDs == 1)
 56a:	21 30       	cpi	r18, 0x01	; 1
 56c:	31 05       	cpc	r19, r1
 56e:	41 f4       	brne	.+16     	; 0x580 <__stack+0x81>
		{
			LCD_putc(4,' ');
 570:	84 e0       	ldi	r24, 0x04	; 4
 572:	60 e2       	ldi	r22, 0x20	; 32
 574:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_putc>
			LCD_UpdateRequired(1, 0);
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_UpdateRequired>
		}
	}

	if (r_out == 1)
 580:	80 91 16 01 	lds	r24, 0x0116
 584:	90 91 17 01 	lds	r25, 0x0117
 588:	20 91 08 01 	lds	r18, 0x0108
 58c:	30 91 09 01 	lds	r19, 0x0109
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	41 f4       	brne	.+16     	; 0x5a4 <__stack+0xa5>
	{
		PORTB &= ~0x20;
 594:	2d 98       	cbi	0x05, 5	; 5
		if (LEDs == 1)
 596:	21 30       	cpi	r18, 0x01	; 1
 598:	31 05       	cpc	r19, r1
 59a:	09 f0       	breq	.+2      	; 0x59e <__stack+0x9f>
 59c:	25 cf       	rjmp	.-438    	; 0x3e8 <main+0x44>
		{
			LCD_putc(5,'-');
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	6d e2       	ldi	r22, 0x2D	; 45
 5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <__stack+0xb3>
			LCD_UpdateRequired(1, 0);
		}
	}
	else
	{
		PORTB |= 0x20;
 5a4:	2d 9a       	sbi	0x05, 5	; 5
		if (LEDs == 1)
 5a6:	21 30       	cpi	r18, 0x01	; 1
 5a8:	31 05       	cpc	r19, r1
 5aa:	09 f0       	breq	.+2      	; 0x5ae <__stack+0xaf>
 5ac:	1d cf       	rjmp	.-454    	; 0x3e8 <main+0x44>
		{
			LCD_putc(5,' ');
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	60 e2       	ldi	r22, 0x20	; 32
 5b2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_putc>
			LCD_UpdateRequired(1, 0);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_UpdateRequired>
 5be:	14 cf       	rjmp	.-472    	; 0x3e8 <main+0x44>

000005c0 <CHAR2BCD2>:
*                   The input must be in the range 0 to 99.
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
 5c0:	48 2f       	mov	r20, r24
 5c2:	6a e0       	ldi	r22, 0x0A	; 10
 5c4:	0e 94 9e 04 	call	0x93c	; 0x93c <__udivmodqi4>
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	22 0f       	add	r18, r18
 5d0:	33 1f       	adc	r19, r19
 5d2:	8a 95       	dec	r24
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <CHAR2BCD2+0xe>
 5d6:	84 2f       	mov	r24, r20
 5d8:	0e 94 9e 04 	call	0x93c	; 0x93c <__udivmodqi4>
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 5dc:	89 2f       	mov	r24, r25
 5de:	82 2b       	or	r24, r18
 5e0:	08 95       	ret

000005e2 <CHAR2BCD3>:
*                   The result is an integer where the three lowest nibbles
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
 5e2:	28 2f       	mov	r18, r24
 5e4:	64 e6       	ldi	r22, 0x64	; 100
 5e6:	0e 94 9e 04 	call	0x93c	; 0x93c <__udivmodqi4>
 5ea:	49 2f       	mov	r20, r25
 5ec:	82 2f       	mov	r24, r18
 5ee:	0e 94 9e 04 	call	0x93c	; 0x93c <__udivmodqi4>
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
    {
        high++;
        input -= 100;
    }

    high <<= 4;
 5f6:	54 e0       	ldi	r21, 0x04	; 4
 5f8:	22 0f       	add	r18, r18
 5fa:	33 1f       	adc	r19, r19
 5fc:	5a 95       	dec	r21
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <CHAR2BCD3+0x16>
 600:	84 2f       	mov	r24, r20
 602:	6a e0       	ldi	r22, 0x0A	; 10
 604:	0e 94 9e 04 	call	0x93c	; 0x93c <__udivmodqi4>
 608:	28 0f       	add	r18, r24
 60a:	31 1d       	adc	r19, r1
 60c:	94 e0       	ldi	r25, 0x04	; 4
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	9a 95       	dec	r25
 614:	e1 f7       	brne	.-8      	; 0x60e <CHAR2BCD3+0x2c>
 616:	84 2f       	mov	r24, r20
 618:	0e 94 9e 04 	call	0x93c	; 0x93c <__udivmodqi4>
 61c:	89 2f       	mov	r24, r25
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	28 2b       	or	r18, r24
 622:	39 2b       	or	r19, r25
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 624:	c9 01       	movw	r24, r18
 626:	08 95       	ret

00000628 <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
 628:	98 2f       	mov	r25, r24
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 62a:	66 30       	cpi	r22, 0x06	; 6
 62c:	b0 f5       	brcc	.+108    	; 0x69a <LCD_WriteDigit+0x72>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 62e:	8a 52       	subi	r24, 0x2A	; 42
 630:	81 35       	cpi	r24, 0x51	; 81
 632:	18 f0       	brcs	.+6      	; 0x63a <LCD_WriteDigit+0x12>
 634:	40 e0       	ldi	r20, 0x00	; 0
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	0c c0       	rjmp	.+24     	; 0x652 <LCD_WriteDigit+0x2a>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 63a:	91 36       	cpi	r25, 0x61	; 97
 63c:	08 f0       	brcs	.+2      	; 0x640 <LCD_WriteDigit+0x18>
            c &= ~0x20;                         // if necessarry
 63e:	9f 7d       	andi	r25, 0xDF	; 223

        c -= '*';

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 640:	9a 52       	subi	r25, 0x2A	; 42
 642:	e9 2f       	mov	r30, r25
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	e4 59       	subi	r30, 0x94	; 148
 64c:	ff 4f       	sbci	r31, 0xFF	; 255
 64e:	45 91       	lpm	r20, Z+
 650:	54 91       	lpm	r21, Z+
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 652:	86 2f       	mov	r24, r22
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	dc 01       	movw	r26, r24
 658:	a1 70       	andi	r26, 0x01	; 1
 65a:	b0 70       	andi	r27, 0x00	; 0
 65c:	60 fd       	sbrc	r22, 0
 65e:	02 c0       	rjmp	.+4      	; 0x664 <LCD_WriteDigit+0x3c>
 660:	90 ef       	ldi	r25, 0xF0	; 240
 662:	01 c0       	rjmp	.+2      	; 0x666 <LCD_WriteDigit+0x3e>
 664:	9f e0       	ldi	r25, 0x0F	; 15
        mask = 0x0F;                // Digit 1, 3, 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 666:	66 95       	lsr	r22
 668:	e6 2f       	mov	r30, r22
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	e5 5e       	subi	r30, 0xE5	; 229
 66e:	fe 4f       	sbci	r31, 0xFE	; 254
 670:	30 e0       	ldi	r19, 0x00	; 0

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 672:	24 2f       	mov	r18, r20
 674:	2f 70       	andi	r18, 0x0F	; 15
        seg >>= 4;
 676:	84 e0       	ldi	r24, 0x04	; 4
 678:	56 95       	lsr	r21
 67a:	47 95       	ror	r20
 67c:	8a 95       	dec	r24
 67e:	e1 f7       	brne	.-8      	; 0x678 <LCD_WriteDigit+0x50>
        if (digit & 0x01)
 680:	10 97       	sbiw	r26, 0x00	; 0
 682:	11 f0       	breq	.+4      	; 0x688 <LCD_WriteDigit+0x60>
            nibble <<= 4;
 684:	22 95       	swap	r18
 686:	20 7f       	andi	r18, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 688:	80 81       	ld	r24, Z
 68a:	89 23       	and	r24, r25
 68c:	28 2b       	or	r18, r24
 68e:	20 83       	st	Z, r18
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 690:	3f 5f       	subi	r19, 0xFF	; 255
 692:	34 30       	cpi	r19, 0x04	; 4
 694:	11 f0       	breq	.+4      	; 0x69a <LCD_WriteDigit+0x72>
        nibble = seg & 0x000F;
        seg >>= 4;
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
 696:	35 96       	adiw	r30, 0x05	; 5
 698:	ec cf       	rjmp	.-40     	; 0x672 <LCD_WriteDigit+0x4a>
 69a:	08 95       	ret

0000069c <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 69c:	81 11       	cpse	r24, r1
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	eb e1       	ldi	r30, 0x1B	; 27
 6a2:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 6a4:	81 93       	st	Z+, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	ef 32       	cpi	r30, 0x2F	; 47
 6aa:	f9 07       	cpc	r31, r25
 6ac:	d9 f7       	brne	.-10     	; 0x6a4 <LCD_AllSegments+0x8>
        *(LCD_Data + i) = show;
}
 6ae:	08 95       	ret

000006b0 <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 6b6:	8f e0       	ldi	r24, 0x0F	; 15
 6b8:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 6bc:	87 eb       	ldi	r24, 0xB7	; 183
 6be:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 6c2:	87 e0       	ldi	r24, 0x07	; 7
 6c4:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 6c8:	e4 ee       	ldi	r30, 0xE4	; 228
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 ec       	ldi	r24, 0xC0	; 192
 6ce:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 6d0:	80 81       	ld	r24, Z
 6d2:	88 60       	ori	r24, 0x08	; 8
 6d4:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 6d6:	10 92 0c 01 	sts	0x010C, r1


}
 6da:	08 95       	ret

000006dc <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
        auto_joystick_count = 0;
*/

/**************** Auto press joystick for the main.c, END ***************/    

    LCD_timer--;                    // Decreased every LCD frame
 70a:	00 91 00 01 	lds	r16, 0x0100
 70e:	01 50       	subi	r16, 0x01	; 1
 710:	00 93 00 01 	sts	0x0100, r16

    if (gScrollMode)
 714:	80 91 1a 01 	lds	r24, 0x011A
 718:	88 23       	and	r24, r24
 71a:	71 f0       	breq	.+28     	; 0x738 <__vector_22+0x5c>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
 71c:	00 23       	and	r16, r16
 71e:	71 f4       	brne	.+28     	; 0x73c <__vector_22+0x60>
        {
            if (gLCD_Start_Scroll_Timer == 0)
 720:	80 91 0d 01 	lds	r24, 0x010D
 724:	88 23       	and	r24, r24
 726:	21 f4       	brne	.+8      	; 0x730 <__vector_22+0x54>
            {
                gLCD_Update_Required = TRUE;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	80 93 0c 01 	sts	0x010C, r24
 72e:	06 c0       	rjmp	.+12     	; 0x73c <__vector_22+0x60>
            }
            else
                gLCD_Start_Scroll_Timer--;
 730:	81 50       	subi	r24, 0x01	; 1
 732:	80 93 0d 01 	sts	0x010D, r24
 736:	02 c0       	rjmp	.+4      	; 0x73c <__vector_22+0x60>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
 738:	10 92 48 01 	sts	0x0148, r1
    }


    EOL = FALSE;
    if (gLCD_Update_Required == TRUE)
 73c:	80 91 0c 01 	lds	r24, 0x010C
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	09 f0       	breq	.+2      	; 0x746 <__vector_22+0x6a>
 744:	53 c0       	rjmp	.+166    	; 0x7ec <__vector_22+0x110>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
 746:	e0 90 0e 01 	lds	r14, 0x010E
 74a:	ff 24       	eor	r15, r15
 74c:	10 e0       	ldi	r17, 0x00	; 0
 74e:	c0 e0       	ldi	r28, 0x00	; 0
 750:	d0 e0       	ldi	r29, 0x00	; 0
 752:	6c 2f       	mov	r22, r28
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
        {
            if ((gScroll+i) >= 0 && (!EOL))
 754:	80 91 48 01 	lds	r24, 0x0148
 758:	99 27       	eor	r25, r25
 75a:	87 fd       	sbrc	r24, 7
 75c:	90 95       	com	r25
 75e:	8c 0f       	add	r24, r28
 760:	9d 1f       	adc	r25, r29
 762:	97 fd       	sbrc	r25, 7
 764:	16 c0       	rjmp	.+44     	; 0x792 <__vector_22+0xb6>
 766:	11 23       	and	r17, r17
 768:	a1 f4       	brne	.+40     	; 0x792 <__vector_22+0xb6>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
 76a:	80 91 48 01 	lds	r24, 0x0148
 76e:	99 27       	eor	r25, r25
 770:	87 fd       	sbrc	r24, 7
 772:	90 95       	com	r25
 774:	fe 01       	movw	r30, r28
 776:	e1 5d       	subi	r30, 0xD1	; 209
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	e8 0f       	add	r30, r24
 77c:	f9 1f       	adc	r31, r25
 77e:	80 81       	ld	r24, Z
                c_flash = c & 0x80 ? 1 : 0;
 780:	f8 2e       	mov	r15, r24
 782:	ff 1c       	adc	r15, r15
 784:	ff 24       	eor	r15, r15
 786:	ff 1c       	adc	r15, r15
                c = c & 0x7F;
 788:	8f 77       	andi	r24, 0x7F	; 127

                if (c == '\0')
 78a:	21 f4       	brne	.+8      	; 0x794 <__vector_22+0xb8>
 78c:	1c 2f       	mov	r17, r28
 78e:	1f 5f       	subi	r17, 0xFF	; 255
 790:	01 c0       	rjmp	.+2      	; 0x794 <__vector_22+0xb8>
 792:	80 e2       	ldi	r24, 0x20	; 32
            else
                c = ' ';

            // Check if this character is flashing

            if (c_flash && flash)
 794:	ff 20       	and	r15, r15
 796:	21 f0       	breq	.+8      	; 0x7a0 <__vector_22+0xc4>
 798:	94 e0       	ldi	r25, 0x04	; 4
 79a:	9e 15       	cp	r25, r14
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <__vector_22+0xc4>
                LCD_WriteDigit(' ', i);
 79e:	80 e2       	ldi	r24, 0x20	; 32
            else
                LCD_WriteDigit(c, i);
 7a0:	0e 94 14 03 	call	0x628	; 0x628 <LCD_WriteDigit>
 7a4:	21 96       	adiw	r28, 0x01	; 1
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
 7a6:	c6 30       	cpi	r28, 0x06	; 6
 7a8:	d1 05       	cpc	r29, r1
 7aa:	99 f6       	brne	.-90     	; 0x752 <__vector_22+0x76>
 7ac:	ac ee       	ldi	r26, 0xEC	; 236
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
            *(pLCDREG + i) = *(LCD_Data+i);
 7b0:	fd 01       	movw	r30, r26
 7b2:	e1 5d       	subi	r30, 0xD1	; 209
 7b4:	ff 4f       	sbci	r31, 0xFF	; 255
 7b6:	80 81       	ld	r24, Z
 7b8:	8d 93       	st	X+, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	a0 30       	cpi	r26, 0x00	; 0
 7be:	b8 07       	cpc	r27, r24
 7c0:	b9 f7       	brne	.-18     	; 0x7b0 <__vector_22+0xd4>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
 7c2:	80 91 0f 01 	lds	r24, 0x010F
 7c6:	88 23       	and	r24, r24
 7c8:	21 f0       	breq	.+8      	; 0x7d2 <__vector_22+0xf6>
            *(pLCDREG + 8) = 0x01;
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	80 93 f4 00 	sts	0x00F4, r24
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <__vector_22+0xfa>
        else
            *(pLCDREG + 8) = 0x00;
 7d2:	10 92 f4 00 	sts	0x00F4, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
 7d6:	11 30       	cpi	r17, 0x01	; 1
 7d8:	11 f4       	brne	.+4      	; 0x7de <__vector_22+0x102>
            gScroll = -6;
 7da:	8a ef       	ldi	r24, 0xFA	; 250
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <__vector_22+0x108>
        else
            gScroll++;
 7de:	80 91 48 01 	lds	r24, 0x0148
 7e2:	8f 5f       	subi	r24, 0xFF	; 255
 7e4:	80 93 48 01 	sts	0x0148, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
 7e8:	10 92 0c 01 	sts	0x010C, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
 7ec:	00 23       	and	r16, r16
 7ee:	19 f4       	brne	.+6      	; 0x7f6 <__vector_22+0x11a>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
 7f0:	83 e0       	ldi	r24, 0x03	; 3
 7f2:	80 93 00 01 	sts	0x0100, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
 7f6:	80 91 0e 01 	lds	r24, 0x010E
 7fa:	8a 30       	cpi	r24, 0x0A	; 10
 7fc:	19 f4       	brne	.+6      	; 0x804 <__vector_22+0x128>
        gFlashTimer= 0;
 7fe:	10 92 0e 01 	sts	0x010E, r1
 802:	03 c0       	rjmp	.+6      	; 0x80a <__vector_22+0x12e>
    else
        gFlashTimer++;
 804:	8f 5f       	subi	r24, 0xFF	; 255
 806:	80 93 0e 01 	sts	0x010E, r24

}
 80a:	ff 91       	pop	r31
 80c:	ef 91       	pop	r30
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	bf 91       	pop	r27
 814:	af 91       	pop	r26
 816:	9f 91       	pop	r25
 818:	8f 91       	pop	r24
 81a:	7f 91       	pop	r23
 81c:	6f 91       	pop	r22
 81e:	5f 91       	pop	r21
 820:	4f 91       	pop	r20
 822:	3f 91       	pop	r19
 824:	2f 91       	pop	r18
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
 838:	38 2f       	mov	r19, r24
 83a:	29 2f       	mov	r18, r25
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 83c:	80 91 0c 01 	lds	r24, 0x010C
 840:	88 23       	and	r24, r24
 842:	e1 f7       	brne	.-8      	; 0x83c <LCD_puts_f+0x4>
 844:	af e2       	ldi	r26, 0x2F	; 47
 846:	b1 e0       	ldi	r27, 0x01	; 1
 848:	83 2f       	mov	r24, r19
 84a:	92 2f       	mov	r25, r18
 84c:	fc 01       	movw	r30, r24
 84e:	01 c0       	rjmp	.+2      	; 0x852 <LCD_puts_f+0x1a>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 850:	8d 93       	st	X+, r24
 852:	9e 2f       	mov	r25, r30
 854:	93 1b       	sub	r25, r19
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 856:	84 91       	lpm	r24, Z+
 858:	88 23       	and	r24, r24
 85a:	29 f0       	breq	.+10     	; 0x866 <LCD_puts_f+0x2e>
 85c:	31 96       	adiw	r30, 0x01	; 1
 85e:	21 e0       	ldi	r18, 0x01	; 1
 860:	a8 34       	cpi	r26, 0x48	; 72
 862:	b2 07       	cpc	r27, r18
 864:	a9 f7       	brne	.-22     	; 0x850 <LCD_puts_f+0x18>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
 866:	e9 2f       	mov	r30, r25
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	e1 5d       	subi	r30, 0xD1	; 209
 86c:	fe 4f       	sbci	r31, 0xFE	; 254
 86e:	10 82       	st	Z, r1

    if (i > 6)
 870:	97 30       	cpi	r25, 0x07	; 7
 872:	48 f0       	brcs	.+18     	; 0x886 <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	80 93 1a 01 	sts	0x011A, r24
        gScroll = 0;
 87a:	10 92 48 01 	sts	0x0148, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 87e:	83 e0       	ldi	r24, 0x03	; 3
 880:	80 93 0d 01 	sts	0x010D, r24
 884:	04 c0       	rjmp	.+8      	; 0x88e <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 886:	10 92 1a 01 	sts	0x011A, r1
        gScroll = 0;
 88a:	10 92 48 01 	sts	0x0148, r1
    }

    gLCD_Update_Required = 1;
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	80 93 0c 01 	sts	0x010C, r24
}
 894:	08 95       	ret

00000896 <LCD_puts>:
*
*	Purpose :		Writes a string to the LCD
*
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
 896:	48 2f       	mov	r20, r24
 898:	29 2f       	mov	r18, r25
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 89a:	80 91 0c 01 	lds	r24, 0x010C
 89e:	88 23       	and	r24, r24
 8a0:	e1 f7       	brne	.-8      	; 0x89a <LCD_puts+0x4>
 8a2:	af e2       	ldi	r26, 0x2F	; 47
 8a4:	b1 e0       	ldi	r27, 0x01	; 1
 8a6:	84 2f       	mov	r24, r20
 8a8:	92 2f       	mov	r25, r18
 8aa:	9c 01       	movw	r18, r24
 8ac:	f9 01       	movw	r30, r18
 8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <LCD_puts+0x1c>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    {
        gTextBuffer[i] = pStr[i];
 8b0:	8d 93       	st	X+, r24
 8b2:	9e 2f       	mov	r25, r30
 8b4:	94 1b       	sub	r25, r20
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 8b6:	80 81       	ld	r24, Z
 8b8:	88 23       	and	r24, r24
 8ba:	29 f0       	breq	.+10     	; 0x8c6 <LCD_puts+0x30>
 8bc:	31 96       	adiw	r30, 0x01	; 1
 8be:	21 e0       	ldi	r18, 0x01	; 1
 8c0:	a8 34       	cpi	r26, 0x48	; 72
 8c2:	b2 07       	cpc	r27, r18
 8c4:	a9 f7       	brne	.-22     	; 0x8b0 <LCD_puts+0x1a>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 8c6:	e9 2f       	mov	r30, r25
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	e1 5d       	subi	r30, 0xD1	; 209
 8cc:	fe 4f       	sbci	r31, 0xFE	; 254
 8ce:	10 82       	st	Z, r1

    if (i > 6)
 8d0:	97 30       	cpi	r25, 0x07	; 7
 8d2:	48 f0       	brcs	.+18     	; 0x8e6 <LCD_puts+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	80 93 1a 01 	sts	0x011A, r24
        gScroll = 0;
 8da:	10 92 48 01 	sts	0x0148, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 8de:	83 e0       	ldi	r24, 0x03	; 3
 8e0:	80 93 0d 01 	sts	0x010D, r24
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <LCD_puts+0x58>
    }
    else
    {
        gScrollMode = 0;        
 8e6:	10 92 1a 01 	sts	0x011A, r1
        gScroll = 0;
 8ea:	10 92 48 01 	sts	0x0148, r1
    }

    gLCD_Update_Required = 1;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	80 93 0c 01 	sts	0x010C, r24
}
 8f4:	08 95       	ret

000008f6 <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 8f6:	89 31       	cpi	r24, 0x19	; 25
 8f8:	28 f4       	brcc	.+10     	; 0x904 <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 8fa:	e8 2f       	mov	r30, r24
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	e1 5d       	subi	r30, 0xD1	; 209
 900:	fe 4f       	sbci	r31, 0xFE	; 254
 902:	60 83       	st	Z, r22
 904:	08 95       	ret

00000906 <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 906:	ef e2       	ldi	r30, 0x2F	; 47
 908:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = ' ';
 90a:	80 e2       	ldi	r24, 0x20	; 32
 90c:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	e8 34       	cpi	r30, 0x48	; 72
 912:	f9 07       	cpc	r31, r25
 914:	d9 f7       	brne	.-10     	; 0x90c <LCD_Clear+0x6>
        gTextBuffer[i] = ' ';
}
 916:	08 95       	ret

00000918 <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 918:	80 93 0f 01 	sts	0x010F, r24
}
 91c:	08 95       	ret

0000091e <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
 91e:	98 2f       	mov	r25, r24

    while (gLCD_Update_Required);
 920:	80 91 0c 01 	lds	r24, 0x010C
 924:	88 23       	and	r24, r24
 926:	e1 f7       	brne	.-8      	; 0x920 <LCD_UpdateRequired+0x2>
    
    gScrollMode = scrollmode;
 928:	60 93 1a 01 	sts	0x011A, r22
    gScroll = 0;
 92c:	10 92 48 01 	sts	0x0148, r1

    gLCD_Update_Required = update;
 930:	90 93 0c 01 	sts	0x010C, r25
}
 934:	08 95       	ret

00000936 <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 936:	10 92 0e 01 	sts	0x010E, r1
}
 93a:	08 95       	ret

0000093c <__udivmodqi4>:
 93c:	99 1b       	sub	r25, r25
 93e:	79 e0       	ldi	r23, 0x09	; 9
 940:	04 c0       	rjmp	.+8      	; 0x94a <__udivmodqi4_ep>

00000942 <__udivmodqi4_loop>:
 942:	99 1f       	adc	r25, r25
 944:	96 17       	cp	r25, r22
 946:	08 f0       	brcs	.+2      	; 0x94a <__udivmodqi4_ep>
 948:	96 1b       	sub	r25, r22

0000094a <__udivmodqi4_ep>:
 94a:	88 1f       	adc	r24, r24
 94c:	7a 95       	dec	r23
 94e:	c9 f7       	brne	.-14     	; 0x942 <__udivmodqi4_loop>
 950:	80 95       	com	r24
 952:	08 95       	ret

00000954 <_exit>:
 954:	f8 94       	cli

00000956 <__stop_program>:
 956:	ff cf       	rjmp	.-2      	; 0x956 <__stop_program>
